plugins {
    id "com.marklogic.ml-gradle" version "4.7.0"
}

repositories {
    mavenCentral()

    // Needed to resolve locally-published versions of MLCP.
    mavenLocal()

    // Needed for some mlcp dependencies, such as commons-csv:1.5.2-marklogic
    maven { url "https://developer.marklogic.com/maven2/" }
}

// For MLCP 11.1.0 and higher, Gradle needs to be told which version of the guava dependency to use.
// Per https://stackoverflow.com/questions/76897459/how-can-i-make-gradle-pick-the-right-guava-variant/77399208#77399208,
// the following will achieve that.
configurations {
    mlcp {
        attributes {
            attribute(TargetJvmEnvironment.TARGET_JVM_ENVIRONMENT_ATTRIBUTE, objects.named(TargetJvmEnvironment.class, TargetJvmEnvironment.STANDARD_JVM))
        }
    }
}

dependencies {
    mlcp "com.marklogic:mlcp:11.2"

    // mlcp uses logback for logging, and without a logback configuration file, no MLCP logging will appear.
    // It is recommended then that your Gradle configuration for mlcp include a directory or some other resource that
    // provides a logback configuration file.
    mlcp files("logging")

    // Because XCC is declared as a "system" dependency, it's not included in the transitive dependencies. That doesn't
    // seem intended, as a user isn't going to want to be responsible for their own copy of XCC. But for this test,
    // pointing to the XCC copy in this repo.
    mlcp fileTree(dir: "../../../lib", include: "*.jar")

    // Need a logging implementation in order for MLCP logging to work.
    mlcp "ch.qos.logback:logback-classic:1.3.14"
}

task importSampleDoc(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Import a single XML document into the Documents database via the App-Services port."
    classpath = configurations.mlcp
    command = "IMPORT"
    host = "localhost"
    port = 8000
    username = "admin"
    password = "admin"
    input_file_path = "data/sample-doc.xml"
    output_collections = "sample-import"
    output_permissions = "rest-reader,read,rest-writer,update"
    output_uri_replace = ".*import,'/import'"
}

task javaImportSampleDoc(type: JavaExec) {
    description = "Demonstrates using Gradle's JavaExec task to run MLCP. This does not involve ml-gradle at all."
    classpath = configurations.mlcp
    mainClass = "com.marklogic.contentpump.ContentPump"
    args = [
            "IMPORT",
            "-host", "localhost",
            "-port", "8000",
            "-username", "admin",
            "-password", "admin",
            "-input_file_path", "data/sample-doc.xml",
            "-output_collections", "sample-import",
            "-output_permissions", "rest-reader,read,rest-writer,update",
            "-output_uri_replace", ".*import,'/import'"
    ]
}

task importRdf(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Example of importing RDF data."
    classpath = configurations.mlcp
    command = "IMPORT"
    host = "localhost"
    port = 8000
    username = "admin"
    password = "admin"
    input_file_path = "data/taxonomy.xml"
    input_file_type = "rdf"
    output_uri_replace = ".*data,'/'"
    output_collections = "rdf-data"
    output_permissions = "rest-reader,read,rest-writer,update"
}

task importDelimitedText(type: com.marklogic.gradle.task.MlcpTask) {
    description = "Example of importing delimited text."
    classpath = configurations.mlcp
    command = "IMPORT"
    host = "localhost"
    port = 8000
    username = "admin"
    password = "admin"
    input_file_path = "data/semicolon-delimited-file.txt"
    input_file_type = "delimited_text"
    output_uri_replace = ".*data,'/'"
    output_permissions = "rest-reader,read,rest-writer,update"
    delimiter = ";"
}